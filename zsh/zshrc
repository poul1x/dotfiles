# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Some terminal emulators don't export LS_COLORS
# In that case, do it manually
if [ -z "$LS_COLORS" ]; then
    eval $(env TERM=xterm256-color dircolors)
fi

# If you come from bash you might have to change your $PATH.
export PATH="$HOME/bin:/usr/local/bin:$PATH"

# Uncomment this after k8scli_install.sh is applied
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Folder where configuration of my tools is stored
export DOTFILES_DIR="$HOME/Documents/dotfiles"
mkdir -p $DOTFILES_DIR

# Folder where python virtual envs stored
export VIRTUALENV_DIR="$HOME/.virtualenv"
mkdir -p $VIRTUALENV_DIR

# Set name of the theme to load
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    alias-finder            # Finds registered aliases of commands: alias-finder "git commit" -> gm
    zsh-autosuggestions     # It suggests commands as you type based on history and completions.
    docker                  # Docker
    kubectl                 # Kubernetes
    tmux                    # Tmux multiplexer
    ansible                 # Ansible: SSH * N
    aws                     # Amazon Web Services
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [ -n $SSH_CONNECTION ] || [ -n $SSH_CLIENT ] || [ -n $SSH_TTY ]; then
  export EDITOR='vi'
else
  export EDITOR='nvim'
fi

# Fuzzy search backend (RipGrep)
if type fd-find &> /dev/null; then
    export FZF_DEFAULT_COMMAND='fd-find --type file --hidden --no-ignore'
    export FZF_DEFAULT_OPTS='-m --height 50% --border'
fi

# NPM global install without sudo
if type npm &> /dev/null; then
    npm set prefix ~/.npm &> /dev/null
    PATH="$HOME/.npm/bin:./node_modules/.bin:$PATH"
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

# openvpn - 1350
alias set-mtu="sudo ip link set dev eth0 mtu"

# Use windows git
alias gitw="git.exe"

# Zsh aliases
alias zshlean="source ~/.p10k.lean.zsh"
alias zshclassic="source ~/.p10k.classic.zsh"

# Config edit
alias zshconf="nvim ~/.zshrc"
alias zshsrc="source ~/.zshrc"
alias omzconf="nvim ~/.oh-my-zsh"
alias nvimconf="nvim ~/.config/nvim/init.vim"
alias vifmconf="nvim ~/.vifm/vifmrc"

# Editor
alias view="nvim -R"

# Git repo config
alias git-config-local="git config user.email 'poulix.nova@mail.ru'; git config user.name 'Pavel Knyazev'"
alias git-config-dsec="git config user.email 'p.knyazev@dsec.ru'; git config user.name 'Pavel Knyazev'"

# Python virtualenv operations

_mkvirtualenv() {
    if [ -n "$1" ]
    then
        mkdir "$VIRTUALENV_DIR/$1" && \
        python3 -m venv "$VIRTUALENV_DIR/$1" && \
        source "$VIRTUALENV_DIR/$1/bin/activate" && \
        echo "Virtualenv $1 created and activated" || \
        echo "Failed to create virtualenv $1"
    else
        echo "Please, specify the name of python virtualenv"
    fi
}

_rmvirtualenv() {
    venv=`ls $VIRTUALENV_DIR | fzf`
    if [ -n "$venv" ]
    then
        rm -rf "$VIRTUALENV_DIR/$venv"
        echo "Virtualenv $venv is removed"
    else
        echo "Python virtualenv was not selected"
    fi
}

_usevirtualenv() {
    venv=`ls $VIRTUALENV_DIR | fzf`
    if [ -n "$venv" ]
    then
        source "$VIRTUALENV_DIR/$venv/bin/activate"
        echo "Virtualenv $venv is activated"
    else
        echo "Python virtualenv was not selected"
    fi
}

alias mkvirtualenv='_mkvirtualenv'
alias rmvirtualenv="_rmvirtualenv"
alias usevirtualenv="_usevirtualenv"
alias lsvirtualenv="ls $VIRTUALENV_DIR"

# Kubernetes
alias kg="kubectl get"
alias kd="kubectl describe"
alias kc="kubectl create"
alias ke="kubectl edit"
alias ka="kubectl apply"

alias kn="kubectl neat"
alias kng="kubectl neat get"
alias kngp="kubectl neat get pod"
alias kngs="kubectl neat get svc"
alias kngd="kubectl neat get deploy"

alias kl='kubectl logs --tail=2000'
alias kla='kubectl logs'

alias kctx="kubectl config get-contexts"
alias kns="kubectl config get-contexts | grep '\*' | awk '{print \$5}'"
alias kcns="kubectl config set-context --current --namespace \`kubectl get namespaces | tail -n +2 | awk '{print \$1}' | fzf\`"
alias kcc="kubectl config use-context \`kubectl config get-contexts | tail -n +2 | tr '*' ' ' | awk '{print \$1}' | fzf\`"

alias kshell="! kubectl get pods 2>1 | grep -q 'No resources' && kubectl exec -it \`kubectl get pods | fzf | awk '{print \$1}'\` -- sh || echo 'No pods are running in current namespace'"
alias kshellb="! kubectl get pods 2>1 | grep -q 'No resources' && kubectl exec -it \`kubectl get pods | fzf | awk '{print \$1}'\` -- bash || echo 'No pods are running in current namespace'"
alias kshella="kubectl exec -it \`kubectl get pods -A | fzf | awk '{print \$2 \" -n \" \$1}'\` -- sh"
alias kshellab="kubectl exec -it \`kubectl get pods -A | fzf | awk '{print \$2 \" -n \" \$1}'\` -- bash"

alias knodeport="kubectl get svc | grep -q NodePort && echo \"\`kubectl get nodes -o wide | awk 'NR==2{print \$6}'\`:\`kubectl get svc | grep NodePort | fzf | awk '{print \$5}' | awk -F '[:/]' '{print \$2}'\`\" || echo \"No NodePort services found\""
alias knodeporta="kubectl get svc -A | grep -q NodePort && echo \"\`kubectl get nodes -o wide | awk 'NR==2{print \$6}'\`:\`kubectl get svc -A | grep NodePort | fzf | awk '{print \$6}' | awk -F '[:/]' '{print \$2}'\`\" || echo \"No NodePort services found\""
alias kloadbalancer="kubectl get svc | grep -q LoadBalancer && echo \"\`kubectl get svc | grep LoadBalancer | fzf | awk {'print \$4 \":\" \$5'} | awk -F '[:/]' '{print \$1 \":\" \$2}'\`\" || echo \"No LoadBalancer services found\""
alias kloadbalancera="kubectl get svc -A | grep -q LoadBalancer && echo \"\`kubectl get svc -A | grep LoadBalancer | fzf | awk {'print \$5 \":\" \$6'} | awk -F '[:/]' '{print \$1 \":\" \$2}'\`\" || echo \"No LoadBalancer services found\""
alias kclusterip="kubectl get svc | grep -q ClusterIP && echo \"\`kubectl get svc | grep ClusterIP | fzf | awk {'print \$3 \":\" \$5'} | awk -F '[:/]' '{print \$1 \":\" \$2}'\`\" || echo \"No ClusterIP services found\""
alias kclusteripa="kubectl get svc -A | grep -q ClusterIP && echo \"\`kubectl get svc -A | grep ClusterIP | fzf | awk {'print \$4 \":\" \$6'} | awk -F '[:/]' '{print \$1 \":\" \$2}'\`\" || echo \"No ClusterIP services found\""

alias ksecret="! kubectl get secrets 2>1 | grep -q 'No resources' && kubectl get secret \`kubectl get secrets | fzf | awk '{print \$1}'\` -oyaml | kubectl neat | fzf --sync | awk '{print \$2}' | base64 -d | xargs || echo 'No secrets found'"
alias ksecreta="kubectl get secret \`kubectl get secrets -A | fzf -0 | awk '{print \$2 \" -n \" \$1}'\` -oyaml | kubectl neat | fzf --sync | awk '{print \$2}' | base64 -d | xargs"
alias kconfigmap="! kubectl get configmaps 2>1 | grep -q 'No resources' && kubectl get configmap \`kubectl get configmap | fzf | awk '{print \$1}'\` -oyaml | kubectl neat || echo 'No configmaps found'"
alias kconfigmapa="kubectl get configmap \`kubectl get configmap -A | fzf -0 | awk '{print \$2 \" -n \" \$1}'\` -oyaml | kubectl neat"

# terraform
alias tf="terraform"

# Other aliases
alias ls="lsd"
alias grep="rg"
alias fd="fdfind --exclude /mnt"
alias lsincludes='fd -a ".*.h*" . | xargs dirname | sort | uniq'

# [Ctrl-E] - edit command prompt in vim
bindkey '^E' edit-command-line

# [Ctrl-Space] - accept autosuggest command (zsh-autosuggestions plugin)
bindkey '^@' autosuggest-accept

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
